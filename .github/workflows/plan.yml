# .github/workflows/plan.yml
name: 'Reusable Workflow: Plan'

on:
  workflow_call:
    inputs:
      pacEnvironmentSelector:
        description: 'Which EPAC environment to target (e.g. EPAC-DEV or EPAC-PROD)'
        required: true
        type: string
      planGitHubEnvironment:
        description: 'GitHub Environment name for this plan (e.g. EPAC-DEV or TENANT-PLAN)'
        required: true
        type: string
      PAC_OUTPUT_FOLDER:
        description: 'Local folder in the runner to output plan files'
        required: true
        type: string
      PAC_DEFINITIONS_FOLDER:
        description: 'Local folder in the runner containing your Definitions JSON'
        required: true
        type: string
    outputs:
      deployPolicyChanges:
        description: 'Whether policy changes were detected'
        value: ${{ jobs.plan.outputs.deployPolicyChanges }}
      deployRoleChanges:
        description: 'Whether role changes were detected'
        value: ${{ jobs.plan.outputs.deployRoleChanges }}

jobs:
  plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.planGitHubEnvironment }}
    outputs:
      deployPolicyChanges: ${{ steps.detectPlan.outputs.deployPolicyChanges }}
      deployRoleChanges: ${{ steps.detectPlan.outputs.deployRoleChanges }}

    steps:
      # 1) Checkout your repository so Scripts/ and Helpers/ are available
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Authenticate to Azure with your SPN JSON
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          allow-no-subscriptions: true

      # 3) Debug: list Scripts folder to verify Helpers are present
      - name: 'Debug: list Scripts folder'
        run: |
          echo "Workspace root: $GITHUB_WORKSPACE"
          echo "Contents of Scripts directory:"
          ls -lR "$GITHUB_WORKSPACE/Scripts"

      # 4) Build the deployment plan (loads Az modules automatically)
      - name: Plan
        uses: azure/powershell@v2
        with:
          azPSVersion: 'latest'
          inlineScript: |
            & "${{ github.workspace }}/Scripts/Deploy/Build-DeploymentPlans.ps1" `
              -PacEnvironmentSelector    ${{ inputs.pacEnvironmentSelector }} `
              -OutputFolder              ${{ inputs.PAC_OUTPUT_FOLDER }} `
              -DefinitionsRootFolder     ${{ inputs.PAC_DEFINITIONS_FOLDER }} `
              -InformationAction         Continue

      # 5) Detect policy/role plan files to decide what to deploy
      - name: Detect Plan File
        id: detectPlan
        shell: pwsh
        run: |
          if (Test-Path "${{ inputs.PAC_OUTPUT_FOLDER }}") {
            Write-Output "deployPolicyChanges=yes" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            if (Get-ChildItem "${{ inputs.PAC_OUTPUT_FOLDER }}" -Recurse -Include roles-plan.json) {
              Write-Output "deployRoleChanges=yes" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            }
          } else {
            Write-Host "Plan not found â€“ skipping deploy jobs."
          }

      # 6) Upload the plan artifact for downstream deploy jobs
      - name: Upload Deployment Plan as Artifact
        if: steps.detectPlan.outputs.deployPolicyChanges == 'yes' || steps.detectPlan.outputs.deployRoleChanges == 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: plans-${{ inputs.pacEnvironmentSelector }}
          path: ${{ inputs.PAC_OUTPUT_FOLDER }}
          if-no-files-found: error
