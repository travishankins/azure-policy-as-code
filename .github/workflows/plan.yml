# .github/workflows/templates-ps1-use-scripts/plan.yml
name: 'Reusable Workflow: Plan'

on:
  workflow_call:
    inputs:
      pacEnvironmentSelector:
        required: true
        type: string
      planGitHubEnvironment:
        required: true
        type: string
      PAC_OUTPUT_FOLDER:
        required: true
        type: string
      PAC_DEFINITIONS_FOLDER:
        required: true
        type: string
    outputs:
      deployPolicyChanges:
        description: 'The result of evaluating if a policy deployment is required'
        value: ${{ jobs.plan.outputs.deployPolicyChanges }}
      deployRoleChanges:
        description: 'The result of evaluating if a role deployment is required'
        value: ${{ jobs.plan.outputs.deployRoleChanges }}

env:
  PAC_OUTPUT_FOLDER: ${{ inputs.PAC_OUTPUT_FOLDER }}
  PAC_DEFINITIONS_FOLDER: ${{ inputs.PAC_DEFINITIONS_FOLDER }}

jobs:
  plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.planGitHubEnvironment }}
    outputs:
      deployPolicyChanges: ${{ steps.detectPlan.outputs.deployPolicyChanges }}
      deployRoleChanges: ${{ steps.detectPlan.outputs.deployRoleChanges }}

    steps:
      # 1) Checkout the repo so Scripts/ and Definitions/ exist
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Azure login using service principal JSON
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          allow-no-subscriptions: true

      # 3) Build the deployment plan from the Scripts folder
      - name: Plan
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          & "${{ github.workspace }}/Scripts/Deploy/Build-DeploymentPlans.ps1" `
            -PacEnvironmentSelector ${{ inputs.pacEnvironmentSelector }} `
            -PlanFolder ${{ inputs.PAC_OUTPUT_FOLDER }} `
            -DefinitionsFolder ${{ inputs.PAC_DEFINITIONS_FOLDER }} `
            -InformationAction Continue

      # 4) Detect if there are policy or role changes to deploy
      - name: Detect Plan File
        id: detectPlan
        shell: pwsh
        run: |
          if (Test-Path "${{ env.PAC_OUTPUT_FOLDER }}") {
            Write-Output "deployPolicyChanges=yes" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            if (Get-ChildItem "${{ env.PAC_OUTPUT_FOLDER }}" -Recurse -Include roles-plan.json) {
              Write-Output "deployRoleChanges=yes" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            }
          } else {
            Write-Host "Plan not found. Skipping deploy jobs."
          }

      # 5) Upload plan artifact if changes exist
      - name: Upload Deployment Plan as Artifact
        if: steps.detectPlan.outputs.deployPolicyChanges == 'yes' || steps.detectPlan.outputs.deployRoleChanges == 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: 'plans-${{ inputs.pacEnvironmentSelector }}'
          path: ${{ env.PAC_OUTPUT_FOLDER }}
          if-no-files-found: error
